name: api

on:
  push:
    tags:
      - '*'
    branches:
      - main

concurrency:
  group: api-${{ github.ref }}
  cancel-in-progress: true

permissions:
  id-token: write
  packages: write
  pull-requests: write
  contents: read

jobs:
  ci:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dsherret/rust-toolchain-file@v1

      - name: Install jq
        uses: dcarbone/install-jq-action@v3.1.1

      - name: api version var
        run: |
          if [[ "$GITHUB_REF" == refs/heads/main ]]; then
            # Check for open release PR
            RELEASE_PR=$(gh pr list --label release,automated --state open --json title --jq '.[0].title' 2>/dev/null || echo "")
            if [[ -n "$RELEASE_PR" ]]; then
              # Extract version from PR title like "chore(release): v0.2.60"
              BASE_VERSION=$(echo "$RELEASE_PR" | grep -oP 'v\K[0-9]+\.[0-9]+\.[0-9]+')
            else
              # Fall back to Cargo.toml version
              BASE_VERSION=$(cargo metadata --format-version=1 | jq -r '.packages[] | select(.name == "api") | .version')
            fi
            DATE=$(date +%Y%m%d)
            SHORT_SHA=$(git rev-parse --short=7 HEAD)
            API_VERSION="${BASE_VERSION}-rc.${DATE}.${SHORT_SHA}"
          else
            API_VERSION=$(cargo metadata --format-version=1 | jq -r '.packages[] | select(.name == "api") | .version')
          fi
          echo "API_VERSION=${API_VERSION}" >> "$GITHUB_ENV"
        env:
          GH_TOKEN: ${{ secrets.RELEASE_PR_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Docker Build
        uses: docker/build-push-action@v5
        with:
          push: true
          tags: |
            tetonai/smith-api
            tetonai/smith-api:${{ env.API_VERSION }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          load: true
      - name: Report Status
        if: always()
        uses: ravsamhq/notify-slack-action@v2
        with:
          status: ${{ job.status }}
          notify_when: 'failure'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SMITH_TEAM_SLACK_NOTIFICATIONS }}
